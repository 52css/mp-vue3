import{_ as s,c as n,o as a,a4 as p}from"./chunks/framework.DsvKXnjw.js";const F=JSON.parse('{"title":"defineComponent","description":"","frontmatter":{},"headers":[],"relativePath":"框架接口/组件 Component/defineComponent - 🔥 ✨.md","filePath":"框架接口/组件 Component/defineComponent - 🔥 ✨.md"}'),l={name:"框架接口/组件 Component/defineComponent - 🔥 ✨.md"},e=p(`<h1 id="definecomponent" tabindex="-1">defineComponent <a class="header-anchor" href="#definecomponent" aria-label="Permalink to &quot;defineComponent&quot;">​</a></h1><ul><li>继承<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Component.html" target="_blank" rel="noreferrer">微信小程序 Component</a></li><li>扩充支持 <code>Function</code></li><li>👍 对象默认下扩充 <code>setup</code> 方法、 <code>props</code> 属性</li></ul><h2 id="扩充支持-function" tabindex="-1">扩充支持 <code>Function</code> <a class="header-anchor" href="#扩充支持-function" aria-label="Permalink to &quot;扩充支持 \`Function\`&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineComponent, ref } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;@52css/mp-vue3&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">defineComponent</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#B392F0;"> onIncrease</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    count.value</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 数据变更，自动响应 this.data.count</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 所有的数据和方法需要返回</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    count,</span></span>
<span class="line"><span style="color:#E1E4E8;">    onIncrease</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="👍-对象默认下扩充-setup-方法" tabindex="-1">👍 对象默认下扩充 <code>setup</code> 方法 <a class="header-anchor" href="#👍-对象默认下扩充-setup-方法" aria-label="Permalink to &quot;👍 对象默认下扩充 \`setup\` 方法&quot;">​</a></h2><ul><li>✨ 增加 <code>properties</code> 定义, 推导 <code>props</code> 类型</li><li>✨ 增加 <code>emits</code> 定义, 推导 <code>emit</code> 类型</li><li>✨ 增强 <code>properties</code> 下的 <code>value</code> 根据 <code>type</code> 和 <code>optionalTypes</code> 来推导</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineComponent, ref, PropType } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;@52css/mp-vue3&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> User</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  id</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#FFAB70;">  name</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">defineComponent</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#FFAB70;">  properties</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // 普通类型</span></span>
<span class="line"><span style="color:#FFAB70;">    name</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> String</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">    border</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">      type</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Boolean</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">      optionalTypes</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#FFAB70;">      value</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> &quot;12&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 类型 string | number; 有value根据\`type\` 和 \`optionalTypes\`推导对应类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#FFAB70;">    user</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Object</span><span style="color:#B392F0;"> as</span><span style="color:#B392F0;"> PropType</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="color:#FFAB70;">    userList</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Array</span><span style="color:#B392F0;"> as</span><span style="color:#B392F0;"> PropType</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">[]&gt;,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#FFAB70;">  emits</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    change</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">_value</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">    test</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">, { </span><span style="color:#FFAB70;">emit</span><span style="color:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;🚀 ~ setup ~ this:&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 自动获取当前实例</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;🚀 ~ setup ~ props:&quot;</span><span style="color:#E1E4E8;">, props); </span><span style="color:#6A737D;">// 转换成 shallowReactive(this.properties) 这样可以watch</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#B392F0;"> onIncrease</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      count.value</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 数据变更，自动响应 this.data.count</span></span>
<span class="line"><span style="color:#6A737D;">      // 根据 options.emits 推导 emit</span></span>
<span class="line"><span style="color:#B392F0;">      emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;change&#39;</span><span style="color:#E1E4E8;">, count.value) </span><span style="color:#6A737D;">// 相当于调用 this.triggerEvent(&#39;change&#39;, {value: count.value})</span></span>
<span class="line"><span style="color:#B392F0;">      emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    watch</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> props.name,</span></span>
<span class="line"><span style="color:#E1E4E8;">      (</span><span style="color:#FFAB70;">newVal</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;🚀 ~ watch ~ newVal:&quot;</span><span style="color:#E1E4E8;">, newVal);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 所有的数据和方法需要返回</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      count,</span></span>
<span class="line"><span style="color:#E1E4E8;">      onIncrease</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><h2 id="setup-参数" tabindex="-1">Setup 参数 <a class="header-anchor" href="#setup-参数" aria-label="Permalink to &quot;Setup 参数&quot;">​</a></h2><h3 id="componentprops-属性" tabindex="-1">ComponentProps 属性 <a class="header-anchor" href="#componentprops-属性" aria-label="Permalink to &quot;ComponentProps 属性&quot;">​</a></h3><ul><li>读取小程序 <code>this.properties</code>属性转换的响应式数据，可以<code>watch</code></li></ul><h3 id="componentcontext-属性" tabindex="-1">ComponentContext 属性 <a class="header-anchor" href="#componentcontext-属性" aria-label="Permalink to &quot;ComponentContext 属性&quot;">​</a></h3><ul><li><code>emit</code> 对外触发事件 <code>(key: string, value: any) =&gt; {this.triggerEvent(key, { value });}</code></li></ul>`,12),o=[e];function r(c,t,i,E,y,u){return a(),n("div",null,o)}const m=s(l,[["render",r]]);export{F as __pageData,m as default};
